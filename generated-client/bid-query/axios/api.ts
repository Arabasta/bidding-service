/* tslint:disable */
/* eslint-disable */
/**
 * Bid Query Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Ack
 */
export interface Ack {
    /**
     * 
     * @type {string}
     * @memberof Ack
     */
    'type': AckTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Ack
     */
    'op': AckOpEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof Ack
     */
    'ids': Array<string>;
}

export const AckTypeEnum = {
    Ack: 'ack'
} as const;

export type AckTypeEnum = typeof AckTypeEnum[keyof typeof AckTypeEnum];
export const AckOpEnum = {
    Subscribe: 'subscribe',
    Unsubscribe: 'unsubscribe'
} as const;

export type AckOpEnum = typeof AckOpEnum[keyof typeof AckOpEnum];

/**
 * 
 * @export
 * @interface Bid
 */
export interface Bid {
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    'bidId': string;
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    'auctionId': string;
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    'bidderId': string;
    /**
     * 
     * @type {number}
     * @memberof Bid
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof Bid
     */
    'at': string;
}
/**
 * 
 * @export
 * @interface ErrorFrame
 */
export interface ErrorFrame {
    /**
     * 
     * @type {string}
     * @memberof ErrorFrame
     */
    'type': ErrorFrameTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ErrorFrame
     */
    'code': ErrorFrameCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ErrorFrame
     */
    'message': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ErrorFrame
     */
    'details'?: { [key: string]: any; };
}

export const ErrorFrameTypeEnum = {
    Error: 'error'
} as const;

export type ErrorFrameTypeEnum = typeof ErrorFrameTypeEnum[keyof typeof ErrorFrameTypeEnum];
export const ErrorFrameCodeEnum = {
    InvalidPayload: 'invalid_payload',
    TooManyIds: 'too_many_ids',
    Unauthorized: 'unauthorized',
    Internal: 'internal'
} as const;

export type ErrorFrameCodeEnum = typeof ErrorFrameCodeEnum[keyof typeof ErrorFrameCodeEnum];

/**
 * 
 * @export
 * @interface ListBidsResponse
 */
export interface ListBidsResponse {
    /**
     * 
     * @type {Array<Bid>}
     * @memberof ListBidsResponse
     */
    'items': Array<Bid>;
    /**
     * Opaque token for the next page, or null if no more results.
     * @type {string}
     * @memberof ListBidsResponse
     */
    'nextCursor'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ListBidsResponse
     */
    'hasMore'?: boolean;
}
/**
 * 
 * @export
 * @interface Ping
 */
export interface Ping {
    /**
     * 
     * @type {string}
     * @memberof Ping
     */
    'type': PingTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Ping
     */
    'ts': string;
}

export const PingTypeEnum = {
    Ping: 'ping'
} as const;

export type PingTypeEnum = typeof PingTypeEnum[keyof typeof PingTypeEnum];

/**
 * 
 * @export
 * @interface Pong
 */
export interface Pong {
    /**
     * 
     * @type {string}
     * @memberof Pong
     */
    'type': PongTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Pong
     */
    'ts': string;
}

export const PongTypeEnum = {
    Pong: 'pong'
} as const;

export type PongTypeEnum = typeof PongTypeEnum[keyof typeof PongTypeEnum];

/**
 * 
 * @export
 * @interface PriceEvent
 */
export interface PriceEvent {
    /**
     * 
     * @type {string}
     * @memberof PriceEvent
     */
    'type': PriceEventTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PriceEvent
     */
    'auctionId': string;
    /**
     * 
     * @type {number}
     * @memberof PriceEvent
     */
    'currentPrice': number;
    /**
     * 
     * @type {number}
     * @memberof PriceEvent
     */
    'minNextBid'?: number;
    /**
     * Monotonic version/seq for resume.
     * @type {number}
     * @memberof PriceEvent
     */
    'version': number;
    /**
     * Opaque token (e.g., same as version or compound).
     * @type {string}
     * @memberof PriceEvent
     */
    'resumeToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof PriceEvent
     */
    'at': string;
}

export const PriceEventTypeEnum = {
    Price: 'price'
} as const;

export type PriceEventTypeEnum = typeof PriceEventTypeEnum[keyof typeof PriceEventTypeEnum];

/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    /**
     * A URI reference [RFC3986] that identifies the problem type
     * @type {string}
     * @memberof ProblemDetails
     */
    'type': string;
    /**
     * A short, human-readable summary of the problem type
     * @type {string}
     * @memberof ProblemDetails
     */
    'title': string;
    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem
     * @type {number}
     * @memberof ProblemDetails
     */
    'status': number;
    /**
     * A human-readable explanation specific to this occurrence of the problem
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string;
}
/**
 * 
 * @export
 * @interface Subscribe
 */
export interface Subscribe {
    /**
     * 
     * @type {string}
     * @memberof Subscribe
     */
    'type': SubscribeTypeEnum;
    /**
     * Auction IDs to (add to) subscription. Max 200.
     * @type {Array<string>}
     * @memberof Subscribe
     */
    'ids': Array<string>;
    /**
     * Map of auctionId -> resumeToken (last seen version/seq).
     * @type {{ [key: string]: string; }}
     * @memberof Subscribe
     */
    'resumeFrom'?: { [key: string]: string; };
}

export const SubscribeTypeEnum = {
    Subscribe: 'subscribe'
} as const;

export type SubscribeTypeEnum = typeof SubscribeTypeEnum[keyof typeof SubscribeTypeEnum];

/**
 * 
 * @export
 * @interface Unsubscribe
 */
export interface Unsubscribe {
    /**
     * 
     * @type {string}
     * @memberof Unsubscribe
     */
    'type': UnsubscribeTypeEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof Unsubscribe
     */
    'ids': Array<string>;
}

export const UnsubscribeTypeEnum = {
    Unsubscribe: 'unsubscribe'
} as const;

export type UnsubscribeTypeEnum = typeof UnsubscribeTypeEnum[keyof typeof UnsubscribeTypeEnum];

/**
 * @type WSClientMessage
 * @export
 */
export type WSClientMessage = { type: 'ping' } & Ping | { type: 'subscribe' } & Subscribe | { type: 'unsubscribe' } & Unsubscribe;

/**
 * @type WSServerMessage
 * @export
 */
export type WSServerMessage = { type: 'ack' } & Ack | { type: 'error' } & ErrorFrame | { type: 'pong' } & Pong | { type: 'price' } & PriceEvent;


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns bids for a given auction, newest first by default, using cursor pagination. `cursor` is from the previous page\'s (`nextCursor`). 
         * @summary List bids for an auction
         * @param {string} auctionId The auction ID
         * @param {string | null} [cursor] Cursor from the previous page, omit for the first page
         * @param {number} [limit] Page size. Max 200.
         * @param {AuctionsAuctionIdBidsGetDirectionEnum} [direction] Sort in descending or ascending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionsAuctionIdBidsGet: async (auctionId: string, cursor?: string | null, limit?: number, direction?: AuctionsAuctionIdBidsGetDirectionEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auctionId' is not null or undefined
            assertParamExists('auctionsAuctionIdBidsGet', 'auctionId', auctionId)
            const localVarPath = `/auctions/{auctionId}/bids`
                .replace(`{${"auctionId"}}`, encodeURIComponent(String(auctionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns bids for a given auction, newest first by default, using cursor pagination. `cursor` is from the previous page\'s (`nextCursor`). 
         * @summary List bids for an auction
         * @param {string} auctionId The auction ID
         * @param {string | null} [cursor] Cursor from the previous page, omit for the first page
         * @param {number} [limit] Page size. Max 200.
         * @param {AuctionsAuctionIdBidsGetDirectionEnum} [direction] Sort in descending or ascending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auctionsAuctionIdBidsGet(auctionId: string, cursor?: string | null, limit?: number, direction?: AuctionsAuctionIdBidsGetDirectionEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBidsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auctionsAuctionIdBidsGet(auctionId, cursor, limit, direction, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.auctionsAuctionIdBidsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Returns bids for a given auction, newest first by default, using cursor pagination. `cursor` is from the previous page\'s (`nextCursor`). 
         * @summary List bids for an auction
         * @param {string} auctionId The auction ID
         * @param {string | null} [cursor] Cursor from the previous page, omit for the first page
         * @param {number} [limit] Page size. Max 200.
         * @param {AuctionsAuctionIdBidsGetDirectionEnum} [direction] Sort in descending or ascending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auctionsAuctionIdBidsGet(auctionId: string, cursor?: string | null, limit?: number, direction?: AuctionsAuctionIdBidsGetDirectionEnum, options?: RawAxiosRequestConfig): AxiosPromise<ListBidsResponse> {
            return localVarFp.auctionsAuctionIdBidsGet(auctionId, cursor, limit, direction, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns bids for a given auction, newest first by default, using cursor pagination. `cursor` is from the previous page\'s (`nextCursor`). 
     * @summary List bids for an auction
     * @param {string} auctionId The auction ID
     * @param {string | null} [cursor] Cursor from the previous page, omit for the first page
     * @param {number} [limit] Page size. Max 200.
     * @param {AuctionsAuctionIdBidsGetDirectionEnum} [direction] Sort in descending or ascending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public auctionsAuctionIdBidsGet(auctionId: string, cursor?: string | null, limit?: number, direction?: AuctionsAuctionIdBidsGetDirectionEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).auctionsAuctionIdBidsGet(auctionId, cursor, limit, direction, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AuctionsAuctionIdBidsGetDirectionEnum = {
    Desc: 'desc',
    Asc: 'asc'
} as const;
export type AuctionsAuctionIdBidsGetDirectionEnum = typeof AuctionsAuctionIdBidsGetDirectionEnum[keyof typeof AuctionsAuctionIdBidsGetDirectionEnum];


