// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GetAuctionsAuctionIdBidsParamsDirection.
const (
	Asc  GetAuctionsAuctionIdBidsParamsDirection = "asc"
	Desc GetAuctionsAuctionIdBidsParamsDirection = "desc"
)

// Bid defines model for Bid.
type Bid struct {
	Amount    float64   `json:"amount"`
	At        time.Time `json:"at"`
	AuctionId string    `json:"auctionId"`
	BidId     string    `json:"bidId"`
	BidderId  string    `json:"bidderId"`
}

// ListBidsResponse defines model for ListBidsResponse.
type ListBidsResponse struct {
	HasMore *bool `json:"hasMore,omitempty"`
	Items   []Bid `json:"items"`

	// NextCursor Opaque token for the next page, or null if no more results.
	NextCursor *string `json:"nextCursor"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// Detail A human-readable explanation specific to this occurrence of the problem
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code generated by the origin server for this occurrence of the problem
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type
	Title string `json:"title"`

	// Type A URI reference [RFC3986] that identifies the problem type
	Type string `json:"type"`
}

// GetAuctionsAuctionIdBidsParams defines parameters for GetAuctionsAuctionIdBids.
type GetAuctionsAuctionIdBidsParams struct {
	// Cursor Cursor from the previous page, omit for the first page
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Page size. Max 200.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Direction Sort in descending or ascending order.
	Direction *GetAuctionsAuctionIdBidsParamsDirection `form:"direction,omitempty" json:"direction,omitempty"`
}

// GetAuctionsAuctionIdBidsParamsDirection defines parameters for GetAuctionsAuctionIdBids.
type GetAuctionsAuctionIdBidsParamsDirection string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAuctionsAuctionIdBids request
	GetAuctionsAuctionIdBids(ctx context.Context, auctionId string, params *GetAuctionsAuctionIdBidsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAuctionsAuctionIdBids(ctx context.Context, auctionId string, params *GetAuctionsAuctionIdBidsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuctionsAuctionIdBidsRequest(c.Server, auctionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAuctionsAuctionIdBidsRequest generates requests for GetAuctionsAuctionIdBids
func NewGetAuctionsAuctionIdBidsRequest(server string, auctionId string, params *GetAuctionsAuctionIdBidsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "auctionId", runtime.ParamLocationPath, auctionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auctions/%s/bids", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Direction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, *params.Direction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAuctionsAuctionIdBidsWithResponse request
	GetAuctionsAuctionIdBidsWithResponse(ctx context.Context, auctionId string, params *GetAuctionsAuctionIdBidsParams, reqEditors ...RequestEditorFn) (*GetAuctionsAuctionIdBidsResponse, error)
}

type GetAuctionsAuctionIdBidsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListBidsResponse
	ApplicationproblemJSON400 *ProblemDetails
	ApplicationproblemJSON404 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetAuctionsAuctionIdBidsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuctionsAuctionIdBidsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAuctionsAuctionIdBidsWithResponse request returning *GetAuctionsAuctionIdBidsResponse
func (c *ClientWithResponses) GetAuctionsAuctionIdBidsWithResponse(ctx context.Context, auctionId string, params *GetAuctionsAuctionIdBidsParams, reqEditors ...RequestEditorFn) (*GetAuctionsAuctionIdBidsResponse, error) {
	rsp, err := c.GetAuctionsAuctionIdBids(ctx, auctionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuctionsAuctionIdBidsResponse(rsp)
}

// ParseGetAuctionsAuctionIdBidsResponse parses an HTTP response from a GetAuctionsAuctionIdBidsWithResponse call
func ParseGetAuctionsAuctionIdBidsResponse(rsp *http.Response) (*GetAuctionsAuctionIdBidsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuctionsAuctionIdBidsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBidsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List bids for an auction
	// (GET /auctions/{auctionId}/bids)
	GetAuctionsAuctionIdBids(c *gin.Context, auctionId string, params GetAuctionsAuctionIdBidsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAuctionsAuctionIdBids operation middleware
func (siw *ServerInterfaceWrapper) GetAuctionsAuctionIdBids(c *gin.Context) {

	var err error

	// ------------- Path parameter "auctionId" -------------
	var auctionId string

	err = runtime.BindStyledParameterWithOptions("simple", "auctionId", c.Param("auctionId"), &auctionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter auctionId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuctionsAuctionIdBidsParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "direction" -------------

	err = runtime.BindQueryParameter("form", true, false, "direction", c.Request.URL.Query(), &params.Direction)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter direction: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuctionsAuctionIdBids(c, auctionId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/auctions/:auctionId/bids", wrapper.GetAuctionsAuctionIdBids)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RWbXPbNgz+Kzhud2tvsiQ7SZfqW9KuW3bLliXZrbcsl1ASbLGVSIUvrr2c//sOpGwr",
	"fknbT/tkS6SAB3iAB3hkhWpaJVFaw7JHZooKG+7/noqSflqtWtRWoH/JG+WkpX84401bI8uG6TA+ithY",
	"6YZblrFSubxGFjE7b5FlTLomR80WEeNPP2SjdHQ0SF8P0uH1MM1Go+zg4G/Wt8QtDqxoesaM1UJOvDFX",
	"WKHkWfnUJr8bjg523c9FuXk3v0vT4Z67JerN686g3m19ETGND05oLFl207nqQ+yZjJY59PmImMEHdruy",
	"qPIPWFjC8Ksw9lSU5hJNq6TBbS4qbs6VxicgrXa4MpYrVSOXZE1YbPxHqz/fahyzjH2TrAsg6dhPiPrF",
	"ygzXms/pWeLMvnHaKE0GSjSFFi1FyDL2e8sfHIJVH1HCWGmwFQJ9AC2fYARKg3R1DWIMUkGjNIJG42pr",
	"YhYxOuL5VgB78hti2JW0C63yGpu3aLmozXbKSn+wjf4EKtdwOdDIS8IBOGtrLjkdg2mxEGNRgFVgK2FA",
	"FYXTGmWBoMY+0Db4ZVGvXM7klNeihFyUECiPYJimcRrDuZCicU3ID50LA8N0FB/tKkYhjeWywF2o/7w8",
	"A41jDGBsxS2IEqUVY4HGI1uB/zLQSVezJuF3h0evklyUJsnvfjh+3W9Mp8UupMZy68w2zusK4efr6wsI",
	"F6BQJcIEJWpusYR87uEoLSZCgkE9Rd2V0Bcn+3A2WyMS0uIkSI4Vtt6ZOVMpbaNN2o1rGq7nG57A2+27",
	"OxUlaKSqI/xYq0/QdJwKWWhs0Df4VobCi8/xeHP57s3B6+NXtzsZ3QuqsrY1WZIEqZmoMi5Uk3TXTeJh",
	"DhohB32Iz3O60Xidy5DUFd/bjUi1gIXTws6vSFJC8+XINeoTZ6v107ul+1/+uiaL/jZJlz9dA6LY2GLh",
	"22Gs6PuOWU/FHw71HK5QT0WBcHJxxiI2RW1CeodxGqeUfdWi5K1gGTuI05h0vOW28tjWdf+4Uu2Fr346",
	"naDdZu0SrdPSUP8aX64cJmKKEjoDEUj8hMbCWGhjqcpLHHNX2wicEXIChZdS0kcRlCaG+/DungRhrFXT",
	"EY5ToZzxSvqdgRf3ayG+fxn/I5kPTfPlPGQ/oT3p4jlZRkOzxEeseYMWtWHZza5G7dDD2VtGyWaZTxJp",
	"NPfM9IfaujaCbIf54dnZrKNNVwH+niAjUI2wqzESEkgHS0gPRPgaU8ga6wP47ETZBHTBJwhG/IsxnPMZ",
	"jNI03uOtFo2wT5x1xLLsKI1Yw2ckBCwbpfQUZIFlw2152gZxpbQFIYHeoiypSqiweg8l6n24SqHRc7Mb",
	"m3dFgiEJzs3ykZui18Gr/NwSu2Hz8C0wSlP6KZS0GBZA3ra1KHzRJR8MwX/suX1uvdhabXxjb2oi8U1C",
	"TP1FIVfIS1+2j+z94Dec2cG+XeSKNwhTXjsEbqDfLZRbqqhclXNfXoWSU5SCZPfryoe9H1zig0NjB2FP",
	"fArhx6JSaCDnxUfvUIe7cPY2CiuQJR2finI9/4paIO0I3QBczkcDSmLMnmsugnP4LD/dEPj+63ja2KZ2",
	"sHTKy1VoL0S38IRujMBLjYkAbRG/ZB7j4f+AsVNAn/OxcrIM8ylMepb5Rbsn4iv9DrYCG0Esna67UZQl",
	"Sa0KXlfK2Ow4PT5gi9vFfwEAAP//XCLnQUwNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
