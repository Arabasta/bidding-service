// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GetApiV1BidsAuctionIdParamsDirection.
const (
	Asc  GetApiV1BidsAuctionIdParamsDirection = "asc"
	Desc GetApiV1BidsAuctionIdParamsDirection = "desc"
)

// Bid defines model for Bid.
type Bid struct {
	Amount    float64   `json:"amount"`
	At        time.Time `json:"at"`
	AuctionId string    `json:"auctionId"`
	BidId     string    `json:"bidId"`
	BidderId  string    `json:"bidderId"`
}

// ListBidsResponse defines model for ListBidsResponse.
type ListBidsResponse struct {
	HasMore *bool `json:"hasMore,omitempty"`
	Items   []Bid `json:"items"`

	// NextCursor Opaque token for the next page, or null if no more results.
	NextCursor *string `json:"nextCursor"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// Detail A human-readable explanation specific to this occurrence of the problem
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code generated by the origin server for this occurrence of the problem
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type
	Title string `json:"title"`

	// Type A URI reference [RFC3986] that identifies the problem type
	Type string `json:"type"`
}

// GetApiV1BidsAuctionIdParams defines parameters for GetApiV1BidsAuctionId.
type GetApiV1BidsAuctionIdParams struct {
	// Cursor Cursor from the previous page, omit for the first page
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Limit Page size. Max 200.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Direction Sort in descending or ascending order.
	Direction *GetApiV1BidsAuctionIdParamsDirection `form:"direction,omitempty" json:"direction,omitempty"`
}

// GetApiV1BidsAuctionIdParamsDirection defines parameters for GetApiV1BidsAuctionId.
type GetApiV1BidsAuctionIdParamsDirection string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1BidsAuctionId request
	GetApiV1BidsAuctionId(ctx context.Context, auctionId string, params *GetApiV1BidsAuctionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1BidsAuctionId(ctx context.Context, auctionId string, params *GetApiV1BidsAuctionIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1BidsAuctionIdRequest(c.Server, auctionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1BidsAuctionIdRequest generates requests for GetApiV1BidsAuctionId
func NewGetApiV1BidsAuctionIdRequest(server string, auctionId string, params *GetApiV1BidsAuctionIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "auctionId", runtime.ParamLocationPath, auctionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/bids/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Direction != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "direction", runtime.ParamLocationQuery, *params.Direction); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1BidsAuctionIdWithResponse request
	GetApiV1BidsAuctionIdWithResponse(ctx context.Context, auctionId string, params *GetApiV1BidsAuctionIdParams, reqEditors ...RequestEditorFn) (*GetApiV1BidsAuctionIdResponse, error)
}

type GetApiV1BidsAuctionIdResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *ListBidsResponse
	ApplicationproblemJSON400 *ProblemDetails
	ApplicationproblemJSON404 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r GetApiV1BidsAuctionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1BidsAuctionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1BidsAuctionIdWithResponse request returning *GetApiV1BidsAuctionIdResponse
func (c *ClientWithResponses) GetApiV1BidsAuctionIdWithResponse(ctx context.Context, auctionId string, params *GetApiV1BidsAuctionIdParams, reqEditors ...RequestEditorFn) (*GetApiV1BidsAuctionIdResponse, error) {
	rsp, err := c.GetApiV1BidsAuctionId(ctx, auctionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1BidsAuctionIdResponse(rsp)
}

// ParseGetApiV1BidsAuctionIdResponse parses an HTTP response from a GetApiV1BidsAuctionIdWithResponse call
func ParseGetApiV1BidsAuctionIdResponse(rsp *http.Response) (*GetApiV1BidsAuctionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1BidsAuctionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListBidsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List bids for an auction
	// (GET /api/v1/bids/{auctionId})
	GetApiV1BidsAuctionId(c *gin.Context, auctionId string, params GetApiV1BidsAuctionIdParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1BidsAuctionId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1BidsAuctionId(c *gin.Context) {

	var err error

	// ------------- Path parameter "auctionId" -------------
	var auctionId string

	err = runtime.BindStyledParameterWithOptions("simple", "auctionId", c.Param("auctionId"), &auctionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter auctionId: %w", err), http.StatusBadRequest)
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1BidsAuctionIdParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "direction" -------------

	err = runtime.BindQueryParameter("form", true, false, "direction", c.Request.URL.Query(), &params.Direction)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter direction: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1BidsAuctionId(c, auctionId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/bids/:auctionId", wrapper.GetApiV1BidsAuctionId)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RW33PbNhL+V3ZwN3PJHEVSsp1z+GYnl9adpnVtt83U9dggsRI3IQEaPxS5Hv3vHQC0",
	"REuykzz1SQIB7H7Yb/fbvWeVajslUVrDintmqhpbHv4ek/A/nVYdaksYPvJWOWn9P1zwtmuQFeN8nB4k",
	"bKp0yy0rmFCubJAlzN51yAomXVuiZsuE8ccX2SSfHIzy16N8fDHOi8mk2Nv7gw0tcYsjS+3AmLGa5CwY",
	"c5UlJU/EY5v8ejzZ23W+JLF5trzO8/ETZwXqzePOoN5tfZkwjbeONApWXPauhhAHJpOHGIZ4JMzgLbta",
	"WVTlR6ysx/AjGXtMwpyh6ZQ0uM1Fzc17pfERSKsdroyVSjXIpbdGFttwafXn3xqnrGD/ytYJkPXsZ576",
	"5coM15rf+bXEhX3jtFHaGxBoKk2dfyEr2M8dv3UIVn1CCVOlwdYI/gJ0fIYJKA3SNQ3QFKSCVmkEjcY1",
	"1qQsYX6Ll1sPeCK+8Q27gnaqVdlg+xYtp8Zsh0yEjW30R1C7lsuRRi48DsBF13DJ/TaYDiuaUgVWga3J",
	"gKoqpzXKCkFNw0O76Jclg3Q5kXPekICSBETKExjneZqn8J4kta6N8fH7ZGCcT9KDXclI0lguK9yF+tez",
	"E9A4xQjG1twCCZSWpoQmIFuB/zrQWZ+zJuPX+wevspKEycrr/x2+Hham07QLqbHcOrON86JG+P7i4hTi",
	"AaiUQJihRM0tCijvAhylaUYSDOo56j6FvjrY+4vFGhFJi7MoOZZsszNyplbaJpu0G9e2XN9teIJgd+ju",
	"mARo9Fnn8WOjPkPbc0qy0thiKPCtCMUPX+Lx8uzdm73Xh6+udjL6JKja2s4UWRalZqZEWqk264+bLMAc",
	"tSRHQ4jPc7pReL3LGNQV39uF6HMBK6fJ3p17SYnFVyLXqI+crderdw/uf/j9wlsMp710hd01IP82tlyG",
	"cpgqf79nNlDxi0N9B+eo51QhHJ2esITNUZsY3nGap7mPvupQ8o5YwfbSPPU63nFbB2wZ7yibj2O+36+E",
	"e+n3Zmi3OTtD67Q0vnpNSFYOM5qjhP5uAhI/o7EwJW2sz3GBU+4am4AzJGdQBSH16khRZ1K4id9uvBxM",
	"tWp7unFOypmgo/8x8OJmLcM3L9M/JQsP0/yhG7Lv0B519NvYd4+jQQvquOYtWtSGFZe7arSHDidvmY8z",
	"K0J8vDzzQMqwn63TIip2bB2BmM0U2nQVsT/xwgRUS3bVQWL0/MYDpFvP9RpTDBkbAvhiM9kEdMpnCIb+",
	"whTe8wVM8jx9wltDLdlHznpWWXGQJ6zlC68BrJjkfhUVgRXjbWXaBnGutAWS4L+iFD5FfFYNFgL1U7gE",
	"aQzc7MYWXHmtkB7O5cOSm2pQvKv4XHl249ARamOS5/6nUtJinP141zVUhYzLPhoP/37g9rnJYmuqCTW9",
	"KYeeb6/Bvrj8k2vkIqTtPfsw+gkXdvTUGHLOW4Q5bxwCNzAsFR9bn1GlEnchvSol5yjJK+63pQ/7MDrD",
	"W4fGjuKI+BjC/6taoYGSV5+CQx3PwsnbJE4/1kv4nMS69VUNoR8P+t730BoNKIkpe664PJz9Z/np9f+/",
	"38bTxiC1g6VjLlZPe0H9rBOrMYEgNSYBtFX6kgWM+/8Axl79QsynykkRW1Ns8qwIM/ZAwVfiHW1FNqJY",
	"Ot30XajIskZVvKmVscVhfrjHllfLvwMAAP//HLqwZ0cNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
