// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: bids.sql

package sqlc

import (
	"context"
	"time"
)

const insertBid = `-- name: InsertBid :one
INSERT INTO bids (auction_id, bidder_id, amount, at)
VALUES ($1, $2, $3, $4)
    RETURNING id, seq
`

type InsertBidParams struct {
	AuctionID string    `json:"auction_id"`
	BidderID  string    `json:"bidder_id"`
	Amount    float64   `json:"amount"`
	At        time.Time `json:"at"`
}

type InsertBidRow struct {
	ID  string `json:"id"`
	Seq int64  `json:"seq"`
}

func (q *Queries) InsertBid(ctx context.Context, arg InsertBidParams) (InsertBidRow, error) {
	row := q.db.QueryRowContext(ctx, insertBid,
		arg.AuctionID,
		arg.BidderID,
		arg.Amount,
		arg.At,
	)
	var i InsertBidRow
	err := row.Scan(&i.ID, &i.Seq)
	return i, err
}

const latestForUpdate = `-- name: LatestForUpdate :one
SELECT id, amount, seq, at
FROM bids
WHERE auction_id = $1
ORDER BY seq DESC
    LIMIT 1
    FOR UPDATE
`

type LatestForUpdateRow struct {
	ID     string    `json:"id"`
	Amount float64   `json:"amount"`
	Seq    int64     `json:"seq"`
	At     time.Time `json:"at"`
}

func (q *Queries) LatestForUpdate(ctx context.Context, auctionID string) (LatestForUpdateRow, error) {
	row := q.db.QueryRowContext(ctx, latestForUpdate, auctionID)
	var i LatestForUpdateRow
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.Seq,
		&i.At,
	)
	return i, err
}
