services:
  # ---------- Mongo ----------
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --username root --password root --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 })' || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 20

  # ---------- Postgres ----------
  postgres:
    image: postgres:18
    container_name: pg
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: bid_command
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d bid_command"]
      interval: 60s
      timeout: 5s
      retries: 20

  # ---------- Redis ----------
  redis:
    image: redis:8-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 60s
      timeout: 3s
      retries: 20

  # ---------- Kafka ----------
  kafka:
    image: bitnamilegacy/kafka:latest
    container_name: kafka
    ports:
      - "9094:9094"   # external client access from host
    environment:
      # KRaft (no ZooKeeper)
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093

      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

      # For local dev
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_NUM_PARTITIONS=1
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1" ]
      interval: 60s
      timeout: 5s
      retries: 20

  # ---------- Kafka UI ----------
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092

  # ---------- Bid Command Service ----------
  bid-command:
    build:
      context: .
      dockerfile: services/bid-command/Dockerfile
    container_name: bid-command
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8082:8080"  # map to 8082
    environment:
      - PGDB_HOST=postgres
      - PGDB_PASSWORD=postgres
      - REDIS_PASSWORD=
      - CONFIG_PATH=/app/config/config.json
    volumes:
      - ./services/bid-command/cmd/config.json:/app/config/config.json:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/healthz || exit 1"]
      interval: 60s
      timeout: 3s
      retries: 30
      start_period: 10s

  # ---------- Bid Query Service ----------
  bid-query:
    build:
      context: .
      dockerfile: services/bid-query/Dockerfile
    container_name: bid-query
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8083:8080"
    environment:
      - MONGO_PASSWORD=root
      - REDIS_PASSWORD=
      - CONFIG_PATH=/app/config/config.json
    volumes:
      - ./services/bid-query/cmd/config.json:/app/config/config.json:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/healthz || exit 1"]
      interval: 60s
      timeout: 3s
      retries: 30
      start_period: 10s

  # ---------- Auction Projector Service ----------
  auction-projector:
    build:
      context: .
      dockerfile: services/auction-projector/Dockerfile
    container_name: auction-projector
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8085:8080"
    environment:
      - REDIS_PASSWORD=
      - CONFIG_PATH=/app/config/config.json
    volumes:
      - ./services/auction-projector/cmd/config.json:/app/config/config.json:ro

  # ---------- Bid Projector Service ----------
  bid-projector:
    build:
      context: .
      dockerfile: services/bid-projector/Dockerfile
    container_name: bid-projector
    depends_on:
      kafka:
        condition: service_healthy
      mongo:
        condition: service_healthy
    ports:
      - "8086:8080"
    environment:
      - MONGO_PASSWORD=root
      - CONFIG_PATH=/app/config/config.json
    volumes:
      - ./services/bid-projector/cmd/config.json:/app/config/config.json:ro

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      bid-command:
        condition: service_started
      bid-query:
        condition: service_started

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro

################################################## Seed Data
  seed-db:
    image: postgres:18
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./scripts/seed/01_bids.sql:/seed/01_bids.sql:ro
    entrypoint: [ "bash", "-lc",
                  "psql 'postgres://postgres:postgres@postgres:5432/bid_command?sslmode=disable' -v ON_ERROR_STOP=1 -f /seed/01_bids.sql" ]

  seed-redis:
    image: redis:8-alpine
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_PASSWORD=
    volumes:
      - ./scripts/seed/redis.sh:/seed/redis.sh:ro
    entrypoint: [ "sh", "/seed/redis.sh" ]

  seed-kafka:
    image: edenhill/kcat:1.7.1
    platform: linux/amd64
    depends_on:
      kafka:
        condition: service_healthy
      bid-command:
        condition: service_healthy
    environment:
      - KAFKA_BROKERS=kafka:9092
    volumes:
      - ./scripts/seed/kafka.sh:/seed/kafka.sh:ro
    entrypoint: [ "sh", "/seed/kafka.sh" ]

volumes:
  pg-data:
  redis-data:
  kafka-data:
  mongo-data:
  prom_data:
  grafana_data: