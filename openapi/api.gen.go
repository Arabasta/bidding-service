// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// PlaceBidRequest defines model for PlaceBidRequest.
type PlaceBidRequest struct {
	Amount   float64 `json:"amount"`
	BidderId string  `json:"bidderId"`
}

// PlaceBidResponse defines model for PlaceBidResponse.
type PlaceBidResponse struct {
	Accepted     bool      `json:"accepted"`
	At           time.Time `json:"at"`
	AuctionId    string    `json:"auctionId"`
	BidId        string    `json:"bidId"`
	BidderId     string    `json:"bidderId"`
	CurrentPrice float64   `json:"currentPrice"`
	MinNextBid   float64   `json:"minNextBid"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// Detail A human-readable explanation specific to this occurrence of the problem
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code generated by the origin server for this occurrence of the problem
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type
	Title string `json:"title"`

	// Type A URI reference [RFC3986] that identifies the problem type
	Type string `json:"type"`
}

// PostAuctionsAuctionIdBidsParams defines parameters for PostAuctionsAuctionIdBids.
type PostAuctionsAuctionIdBidsParams struct {
	// IdempotencyKey Unique key to prevent duplicate bid submissions
	IdempotencyKey string `json:"Idempotency-Key"`
}

// PostAuctionsAuctionIdBidsJSONRequestBody defines body for PostAuctionsAuctionIdBids for application/json ContentType.
type PostAuctionsAuctionIdBidsJSONRequestBody = PlaceBidRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAuctionsAuctionIdBidsWithBody request with any body
	PostAuctionsAuctionIdBidsWithBody(ctx context.Context, auctionId string, params *PostAuctionsAuctionIdBidsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuctionsAuctionIdBids(ctx context.Context, auctionId string, params *PostAuctionsAuctionIdBidsParams, body PostAuctionsAuctionIdBidsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAuctionsAuctionIdBidsWithBody(ctx context.Context, auctionId string, params *PostAuctionsAuctionIdBidsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuctionsAuctionIdBidsRequestWithBody(c.Server, auctionId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuctionsAuctionIdBids(ctx context.Context, auctionId string, params *PostAuctionsAuctionIdBidsParams, body PostAuctionsAuctionIdBidsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuctionsAuctionIdBidsRequest(c.Server, auctionId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAuctionsAuctionIdBidsRequest calls the generic PostAuctionsAuctionIdBids builder with application/json body
func NewPostAuctionsAuctionIdBidsRequest(server string, auctionId string, params *PostAuctionsAuctionIdBidsParams, body PostAuctionsAuctionIdBidsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuctionsAuctionIdBidsRequestWithBody(server, auctionId, params, "application/json", bodyReader)
}

// NewPostAuctionsAuctionIdBidsRequestWithBody generates requests for PostAuctionsAuctionIdBids with any type of body
func NewPostAuctionsAuctionIdBidsRequestWithBody(server string, auctionId string, params *PostAuctionsAuctionIdBidsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "auctionId", runtime.ParamLocationPath, auctionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auctions/%s/bids", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Idempotency-Key", runtime.ParamLocationHeader, params.IdempotencyKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Idempotency-Key", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAuctionsAuctionIdBidsWithBodyWithResponse request with any body
	PostAuctionsAuctionIdBidsWithBodyWithResponse(ctx context.Context, auctionId string, params *PostAuctionsAuctionIdBidsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuctionsAuctionIdBidsResponse, error)

	PostAuctionsAuctionIdBidsWithResponse(ctx context.Context, auctionId string, params *PostAuctionsAuctionIdBidsParams, body PostAuctionsAuctionIdBidsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuctionsAuctionIdBidsResponse, error)
}

type PostAuctionsAuctionIdBidsResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON201                   *PlaceBidResponse
	ApplicationproblemJSON400 *ProblemDetails
	ApplicationproblemJSON401 *ProblemDetails
	ApplicationproblemJSON409 *ProblemDetails
	ApplicationproblemJSON422 *ProblemDetails
}

// Status returns HTTPResponse.Status
func (r PostAuctionsAuctionIdBidsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuctionsAuctionIdBidsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAuctionsAuctionIdBidsWithBodyWithResponse request with arbitrary body returning *PostAuctionsAuctionIdBidsResponse
func (c *ClientWithResponses) PostAuctionsAuctionIdBidsWithBodyWithResponse(ctx context.Context, auctionId string, params *PostAuctionsAuctionIdBidsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuctionsAuctionIdBidsResponse, error) {
	rsp, err := c.PostAuctionsAuctionIdBidsWithBody(ctx, auctionId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuctionsAuctionIdBidsResponse(rsp)
}

func (c *ClientWithResponses) PostAuctionsAuctionIdBidsWithResponse(ctx context.Context, auctionId string, params *PostAuctionsAuctionIdBidsParams, body PostAuctionsAuctionIdBidsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuctionsAuctionIdBidsResponse, error) {
	rsp, err := c.PostAuctionsAuctionIdBids(ctx, auctionId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuctionsAuctionIdBidsResponse(rsp)
}

// ParsePostAuctionsAuctionIdBidsResponse parses an HTTP response from a PostAuctionsAuctionIdBidsWithResponse call
func ParsePostAuctionsAuctionIdBidsResponse(rsp *http.Response) (*PostAuctionsAuctionIdBidsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuctionsAuctionIdBidsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PlaceBidResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest ProblemDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON422 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Place a bid on an auction
	// (POST /auctions/{auctionId}/bids)
	PostAuctionsAuctionIdBids(c *gin.Context, auctionId string, params PostAuctionsAuctionIdBidsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostAuctionsAuctionIdBids operation middleware
func (siw *ServerInterfaceWrapper) PostAuctionsAuctionIdBids(c *gin.Context) {

	var err error

	// ------------- Path parameter "auctionId" -------------
	var auctionId string

	err = runtime.BindStyledParameterWithOptions("simple", "auctionId", c.Param("auctionId"), &auctionId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter auctionId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuctionsAuctionIdBidsParams

	headers := c.Request.Header

	// ------------- Required header parameter "Idempotency-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Idempotency-Key")]; found {
		var IdempotencyKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Idempotency-Key, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Idempotency-Key", valueList[0], &IdempotencyKey, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Idempotency-Key: %w", err), http.StatusBadRequest)
			return
		}

		params.IdempotencyKey = IdempotencyKey

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Idempotency-Key is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuctionsAuctionIdBids(c, auctionId, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auctions/:auctionId/bids", wrapper.PostAuctionsAuctionIdBids)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SW227cNhPHX2XA77twUK2kXSeprTs7QVCnaGE4NgLUNQKKHK2YSKRCjpzdGvvuBUnt",
	"Sd6kcYEid7viYX4z/znwgQnTdkajJseKB+ZEjS0PPy8bLvBcySv83KMj/6mzpkNLCsMG3ppeh++44G3X",
	"ICum+TR9kbDK2JYTK5g0fdkgSxgtO2QF031bomWrhJVKSrQXcu846x3aD9PZ8faEI6v0nK1WCbP4uVcW",
	"JStut8eTNcbd5ogpP6Igb2TrguuMdnjAByGwI9zHINvj5rbSmAa59tfxfWfZLJ+9mOSnk3x6Pc2L2aw4",
	"Pv6D7XrPCSekWnzsTsJ4L0gZPY4A//D8xctD+0slx3vLDz+fnH5l75OCmzDRW4uaLq0S+C8VbZX+HRd0",
	"ruTogtl3XfBY4KjuJkzJnuhr3UboexgJu0frlNEsaHcwQ6wpG2xfI3HVuMf5IcNC/OWEVZ2HYQU7g7pv",
	"uZ5Y5JKXDQIuuoZr7pfBdShUpQSQAaqVAyMipEAwFVCN0EW7LNnR50Lf80ZJKJWEmNQJTPM8zVP4TWnV",
	"9i1oXFBYVw5CYA9pqbQjrqOOY+qbqwuwWGGEoZoTKImaVKXQBbIN/PdBZ4NALguZm5VKumydmBvRe6sO",
	"kTri1LvHnNc1wi/X15cQN4AwEmGOGi0nlFAuA46xaq40OLT3aKEy9inBfr5YbImUJpzHLCZFzcHIudpY",
	"Ssayu75tuV2OLEG4d9fcuZJg0Wed58fGfIF20FRpYbFFTYciFD/8k463V29eHZ+evLw7qOhXoWqizhVZ",
	"FutqbmQqTJsN210WMCet0pNdxG9rOqriwWQM6kbvx4XocwFFbxUt3/kJFIuvRG7RnvVUb/+9WZt/+/7a",
	"3xh2+14YVrdA3je2WoVyqIw/PyjrpZBKz+Ed2nslEM4uL3Y6RcGmaZ7mPvamQ807xQp2nOapb5sdpzqQ",
	"bbP+YdOgViH3QwsxcVzuixaGEXDQ+CWUsE9YDnN1jxqGS1IAuIrhc8AhtoO376+BzCcMqzfOr2i4kNh2",
	"hlCL5eRXXEKNXKL1DQe16y2CRbI+AbhFcLzC9E/fBX1r4+uxwy6No7PBkbO1G+feCe+q5S0SWseK27Er",
	"F6/XCT+Ae8PeJ6NT5iPOihArljDNgzy7bXybIHHQxjdHkGicTGPDN1p97hE+4dJb7CzeoyaQfdcowQkD",
	"g+vLVjkvpluzxOhsaUbRexLTXdyMjs6NXPodwmjC+BDiXSRRRmcfnUd+2Lnq/xYrVrD/Zds3VzY8uLLx",
	"a2u1X0qeKnyID5mQZrN8+h+YH15Kwf5+8H0P28zdVcKe5/k37A9t5KcncuzP4wMU6yk5iABHmM7TBILk",
	"eg6Vwka6Z5Fv+gP4bjTvqTZW/YUSjtZYxoLSm3oe8E5/AN4ro6tGCYIj09PEVBP/SIWh+3nMTTFFyNns",
	"B0DuTcujr4zLZNN8RGMcygSQRPpsb5iE3rU7Rm7vfAEPU3unKcfm5TvrcGnEim+L2AJ72wxzpciyxgje",
	"1MZRcZKf5Gx1t/o7AAD//9A4PQNKDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
